from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from app.database import get_db
from app.models import IPO
from pydantic import BaseModel
from typing import List, Optional
from uuid import UUID

router = APIRouter()

# Pydantic Schema for IPO
class IpoCreate(BaseModel):
    company_name: str
    industry: Optional[str] = None
    issue_size: Optional[float] = None
    price_band: Optional[str] = None
    issue_type: Optional[str] = None
    ipo_type: Optional[str] = None
    fresh_issue: Optional[str] = None
    offer_for_sale: Optional[str] = None
    listing_date: Optional[str] = None
    ipo_open_date: Optional[str] = None
    ipo_close_date: Optional[str] = None
    rhp_file_path: Optional[str] = None

class IpoResponse(IpoCreate):
    id: UUID  # ID is generated by the database
    created_at: str
    updated_at: str

    class Config:
        from_attributes = True

@router.post("/ipo", response_model=IpoResponse)
async def create_ipo(ipo: IpoCreate, db: AsyncSession = Depends(get_db)):
    new_ipo = IPO(**ipo.dict())
    db.add(new_ipo)
    await db.commit()
    await db.refresh(new_ipo)
    return new_ipo

@router.get("/ipos", response_model=List[IpoResponse])
async def get_ipos(db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(IPO))
    return result.scalars().all()

# Get IPO by ID
@router.get("/ipo/{ipo_id}", response_model=IpoResponse)
def get_ipo(ipo_id: UUID, db: Session = Depends(get_db)):
    ipo = db.query(IPO).filter(IPO.id == ipo_id).first()
    if not ipo:
        raise HTTPException(status_code=404, detail="IPO not found")
    return ipo

# Update IPO Details
@router.put("/ipo/{ipo_id}", response_model=IpoResponse)
def update_ipo(ipo_id: UUID, updated_ipo: IpoCreate, db: Session = Depends(get_db)):
    ipo = db.query(IPO).filter(IPO.id == ipo_id).first()
    if not ipo:
        raise HTTPException(status_code=404, detail="IPO not found")
    
    for key, value in updated_ipo.dict(exclude_unset=True).items():
        setattr(ipo, key, value)
    
    db.commit()
    db.refresh(ipo)
    return ipo

# Delete IPO
@router.delete("/ipo/{ipo_id}")
def delete_ipo(ipo_id: UUID, db: Session = Depends(get_db)):
    ipo = db.query(IPO).filter(IPO.id == ipo_id).first()
    if not ipo:
        raise HTTPException(status_code=404, detail="IPO not found")
    
    db.delete(ipo)
    db.commit()
    return {"message": "IPO deleted successfully"}
